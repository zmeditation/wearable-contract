/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC721BaseCollectionInterface extends ethers.utils.Interface {
  functions: {
    "COLLECTION_HASH()": FunctionFragment;
    "ISSUED_ID_BITS()": FunctionFragment;
    "ITEM_ID_BITS()": FunctionFragment;
    "MAX_ISSUED_ID()": FunctionFragment;
    "MAX_ITEM_ID()": FunctionFragment;
    "addItems(tuple[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "batchTransferFrom(address,address,uint256[])": FunctionFragment;
    "completeCollection()": FunctionFragment;
    "createdAt()": FunctionFragment;
    "creator()": FunctionFragment;
    "decodeTokenId(uint256)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "editItemsData(uint256[],uint256[],address[],string[])": FunctionFragment;
    "encodeTokenId(uint256,uint256)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "globalManagers(address)": FunctionFragment;
    "globalMinters(address)": FunctionFragment;
    "initImplementation()": FunctionFragment;
    "initialize(string,string,string,address,bool,bool,address,tuple[])": FunctionFragment;
    "isApproved()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isCompleted()": FunctionFragment;
    "isEditable()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isMintingAllowed()": FunctionFragment;
    "issueTokens(address[],uint256[])": FunctionFragment;
    "itemManagers(uint256,address)": FunctionFragment;
    "itemMinters(uint256,address)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "itemsCount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "rarities()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueItems(uint256[],string[],string[])": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApproved(bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setEditable(bool)": FunctionFragment;
    "setItemsManagers(uint256[],address[],bool[])": FunctionFragment;
    "setItemsMinters(uint256[],address[],uint256[])": FunctionFragment;
    "setManagers(address[],bool[])": FunctionFragment;
    "setMinters(address[],bool[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferCreatorship(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COLLECTION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUED_ID_BITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ITEM_ID_BITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ISSUED_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ITEM_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addItems",
    values: [
      {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCollection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editItemsData",
    values: [BigNumberish[], BigNumberish[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTokenId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "globalManagers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "globalMinters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      boolean,
      boolean,
      string,
      {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEditable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMintingAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "itemManagers",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "itemMinters",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "itemsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rarities", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueItems",
    values: [BigNumberish[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproved",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEditable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemsManagers",
    values: [BigNumberish[], string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemsMinters",
    values: [BigNumberish[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagers",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinters",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCreatorship",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLECTION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUED_ID_BITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ITEM_ID_BITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ISSUED_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ITEM_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editItemsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEditable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemsCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rarities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEditable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemsManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemsMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCreatorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddItem(uint256,tuple)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURI(string,string)": EventFragment;
    "Complete()": EventFragment;
    "CreatorshipTransferred(address,address)": EventFragment;
    "Issue(address,uint256,uint256,uint256,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RescueItem(uint256,string,string)": EventFragment;
    "SetApproved(bool,bool)": EventFragment;
    "SetEditable(bool,bool)": EventFragment;
    "SetGlobalManager(address,bool)": EventFragment;
    "SetGlobalMinter(address,bool)": EventFragment;
    "SetItemManager(uint256,address,bool)": EventFragment;
    "SetItemMinter(uint256,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateItemData(uint256,uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Complete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorshipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescueItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEditable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGlobalManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGlobalMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetItemManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetItemMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateItemData"): EventFragment;
}

export type AddItemEvent = TypedEvent<
  [
    BigNumber,
    [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
      rarity: string;
      maxSupply: BigNumber;
      totalSupply: BigNumber;
      price: BigNumber;
      beneficiary: string;
      metadata: string;
      contentHash: string;
    }
  ] & {
    _itemId: BigNumber;
    _item: [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
      rarity: string;
      maxSupply: BigNumber;
      totalSupply: BigNumber;
      price: BigNumber;
      beneficiary: string;
      metadata: string;
      contentHash: string;
    };
  }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type BaseURIEvent = TypedEvent<
  [string, string] & { _oldBaseURI: string; _newBaseURI: string }
>;

export type CompleteEvent = TypedEvent<[] & {}>;

export type CreatorshipTransferredEvent = TypedEvent<
  [string, string] & { _previousCreator: string; _newCreator: string }
>;

export type IssueEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    _beneficiary: string;
    _tokenId: BigNumber;
    _itemId: BigNumber;
    _issuedId: BigNumber;
    _caller: string;
  }
>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string] & {
    userAddress: string;
    relayerAddress: string;
    functionSignature: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RescueItemEvent = TypedEvent<
  [BigNumber, string, string] & {
    _itemId: BigNumber;
    _contentHash: string;
    _metadata: string;
  }
>;

export type SetApprovedEvent = TypedEvent<
  [boolean, boolean] & { _previousValue: boolean; _newValue: boolean }
>;

export type SetEditableEvent = TypedEvent<
  [boolean, boolean] & { _previousValue: boolean; _newValue: boolean }
>;

export type SetGlobalManagerEvent = TypedEvent<
  [string, boolean] & { _manager: string; _value: boolean }
>;

export type SetGlobalMinterEvent = TypedEvent<
  [string, boolean] & { _minter: string; _value: boolean }
>;

export type SetItemManagerEvent = TypedEvent<
  [BigNumber, string, boolean] & {
    _itemId: BigNumber;
    _manager: string;
    _value: boolean;
  }
>;

export type SetItemMinterEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _itemId: BigNumber;
    _minter: string;
    _value: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type UpdateItemDataEvent = TypedEvent<
  [BigNumber, BigNumber, string, string] & {
    _itemId: BigNumber;
    _price: BigNumber;
    _beneficiary: string;
    _metadata: string;
  }
>;

export class ERC721BaseCollection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721BaseCollectionInterface;

  functions: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<[string]>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<[number]>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<[number]>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<[number]>;

    addItems(
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    decodeTokenId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { itemId: BigNumber; issuedId: BigNumber }
    >;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    editItemsData(
      _itemIds: BigNumberish[],
      _prices: BigNumberish[],
      _beneficiaries: string[],
      _metadatas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    encodeTokenId(
      _itemId: BigNumberish,
      _issuedId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    globalManagers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    globalMinters(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    initImplementation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      baseURI_: string,
      _creator: string,
      _shouldComplete: boolean,
      _isApproved: boolean,
      _rarities: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApproved(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCompleted(overrides?: CallOverrides): Promise<[boolean]>;

    isEditable(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isMintingAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    issueTokens(
      _beneficiaries: string[],
      _itemIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    itemManagers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    itemMinters(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
        rarity: string;
        maxSupply: BigNumber;
        totalSupply: BigNumber;
        price: BigNumber;
        beneficiary: string;
        metadata: string;
        contentHash: string;
      }
    >;

    itemsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rarities(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueItems(
      _itemIds: BigNumberish[],
      _contentHashes: string[],
      _metadatas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApproved(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEditable(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setItemsManagers(
      _itemIds: BigNumberish[],
      _managers: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setItemsMinters(
      _itemIds: BigNumberish[],
      _minters: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagers(
      _managers: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinters(
      _minters: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferCreatorship(
      _newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COLLECTION_HASH(overrides?: CallOverrides): Promise<string>;

  ISSUED_ID_BITS(overrides?: CallOverrides): Promise<number>;

  ITEM_ID_BITS(overrides?: CallOverrides): Promise<number>;

  MAX_ISSUED_ID(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ITEM_ID(overrides?: CallOverrides): Promise<number>;

  addItems(
    _items: {
      rarity: string;
      price: BigNumberish;
      beneficiary: string;
      metadata: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  batchTransferFrom(
    _from: string,
    _to: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeCollection(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  creator(overrides?: CallOverrides): Promise<string>;

  decodeTokenId(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { itemId: BigNumber; issuedId: BigNumber }
  >;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  editItemsData(
    _itemIds: BigNumberish[],
    _prices: BigNumberish[],
    _beneficiaries: string[],
    _metadatas: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  encodeTokenId(
    _itemId: BigNumberish,
    _issuedId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  globalManagers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  globalMinters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initImplementation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _name: string,
    _symbol: string,
    baseURI_: string,
    _creator: string,
    _shouldComplete: boolean,
    _isApproved: boolean,
    _rarities: string,
    _items: {
      rarity: string;
      price: BigNumberish;
      beneficiary: string;
      metadata: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApproved(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCompleted(overrides?: CallOverrides): Promise<boolean>;

  isEditable(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isMintingAllowed(overrides?: CallOverrides): Promise<boolean>;

  issueTokens(
    _beneficiaries: string[],
    _itemIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  itemManagers(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  itemMinters(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  items(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
      rarity: string;
      maxSupply: BigNumber;
      totalSupply: BigNumber;
      price: BigNumber;
      beneficiary: string;
      metadata: string;
      contentHash: string;
    }
  >;

  itemsCount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rarities(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueItems(
    _itemIds: BigNumberish[],
    _contentHashes: string[],
    _metadatas: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    _from: string,
    _to: string,
    _tokenIds: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApproved(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEditable(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setItemsManagers(
    _itemIds: BigNumberish[],
    _managers: string[],
    _values: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setItemsMinters(
    _itemIds: BigNumberish[],
    _minters: string[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagers(
    _managers: string[],
    _values: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinters(
    _minters: string[],
    _values: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferCreatorship(
    _newCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<string>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<number>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<number>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<number>;

    addItems(
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeCollection(overrides?: CallOverrides): Promise<void>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<string>;

    decodeTokenId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { itemId: BigNumber; issuedId: BigNumber }
    >;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    editItemsData(
      _itemIds: BigNumberish[],
      _prices: BigNumberish[],
      _beneficiaries: string[],
      _metadatas: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    encodeTokenId(
      _itemId: BigNumberish,
      _issuedId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    globalManagers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    globalMinters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    initImplementation(overrides?: CallOverrides): Promise<void>;

    initialize(
      _name: string,
      _symbol: string,
      baseURI_: string,
      _creator: string,
      _shouldComplete: boolean,
      _isApproved: boolean,
      _rarities: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    isApproved(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCompleted(overrides?: CallOverrides): Promise<boolean>;

    isEditable(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isMintingAllowed(overrides?: CallOverrides): Promise<boolean>;

    issueTokens(
      _beneficiaries: string[],
      _itemIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    itemManagers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    itemMinters(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
        rarity: string;
        maxSupply: BigNumber;
        totalSupply: BigNumber;
        price: BigNumber;
        beneficiary: string;
        metadata: string;
        contentHash: string;
      }
    >;

    itemsCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rarities(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueItems(
      _itemIds: BigNumberish[],
      _contentHashes: string[],
      _metadatas: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApproved(_value: boolean, overrides?: CallOverrides): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    setEditable(_value: boolean, overrides?: CallOverrides): Promise<void>;

    setItemsManagers(
      _itemIds: BigNumberish[],
      _managers: string[],
      _values: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setItemsMinters(
      _itemIds: BigNumberish[],
      _minters: string[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setManagers(
      _managers: string[],
      _values: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinters(
      _minters: string[],
      _values: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferCreatorship(
      _newCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddItem(uint256,tuple)"(
      _itemId?: BigNumberish | null,
      _item?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
          rarity: string;
          maxSupply: BigNumber;
          totalSupply: BigNumber;
          price: BigNumber;
          beneficiary: string;
          metadata: string;
          contentHash: string;
        }
      ],
      {
        _itemId: BigNumber;
        _item: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          rarity: string;
          maxSupply: BigNumber;
          totalSupply: BigNumber;
          price: BigNumber;
          beneficiary: string;
          metadata: string;
          contentHash: string;
        };
      }
    >;

    AddItem(
      _itemId?: BigNumberish | null,
      _item?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
          rarity: string;
          maxSupply: BigNumber;
          totalSupply: BigNumber;
          price: BigNumber;
          beneficiary: string;
          metadata: string;
          contentHash: string;
        }
      ],
      {
        _itemId: BigNumber;
        _item: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          rarity: string;
          maxSupply: BigNumber;
          totalSupply: BigNumber;
          price: BigNumber;
          beneficiary: string;
          metadata: string;
          contentHash: string;
        };
      }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "BaseURI(string,string)"(
      _oldBaseURI?: null,
      _newBaseURI?: null
    ): TypedEventFilter<
      [string, string],
      { _oldBaseURI: string; _newBaseURI: string }
    >;

    BaseURI(
      _oldBaseURI?: null,
      _newBaseURI?: null
    ): TypedEventFilter<
      [string, string],
      { _oldBaseURI: string; _newBaseURI: string }
    >;

    "Complete()"(): TypedEventFilter<[], {}>;

    Complete(): TypedEventFilter<[], {}>;

    "CreatorshipTransferred(address,address)"(
      _previousCreator?: string | null,
      _newCreator?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousCreator: string; _newCreator: string }
    >;

    CreatorshipTransferred(
      _previousCreator?: string | null,
      _newCreator?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousCreator: string; _newCreator: string }
    >;

    "Issue(address,uint256,uint256,uint256,address)"(
      _beneficiary?: string | null,
      _tokenId?: BigNumberish | null,
      _itemId?: BigNumberish | null,
      _issuedId?: null,
      _caller?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        _beneficiary: string;
        _tokenId: BigNumber;
        _itemId: BigNumber;
        _issuedId: BigNumber;
        _caller: string;
      }
    >;

    Issue(
      _beneficiary?: string | null,
      _tokenId?: BigNumberish | null,
      _itemId?: BigNumberish | null,
      _issuedId?: null,
      _caller?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        _beneficiary: string;
        _tokenId: BigNumber;
        _itemId: BigNumber;
        _issuedId: BigNumber;
        _caller: string;
      }
    >;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >;

    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RescueItem(uint256,string,string)"(
      _itemId?: BigNumberish | null,
      _contentHash?: null,
      _metadata?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _itemId: BigNumber; _contentHash: string; _metadata: string }
    >;

    RescueItem(
      _itemId?: BigNumberish | null,
      _contentHash?: null,
      _metadata?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _itemId: BigNumber; _contentHash: string; _metadata: string }
    >;

    "SetApproved(bool,bool)"(
      _previousValue?: null,
      _newValue?: null
    ): TypedEventFilter<
      [boolean, boolean],
      { _previousValue: boolean; _newValue: boolean }
    >;

    SetApproved(
      _previousValue?: null,
      _newValue?: null
    ): TypedEventFilter<
      [boolean, boolean],
      { _previousValue: boolean; _newValue: boolean }
    >;

    "SetEditable(bool,bool)"(
      _previousValue?: null,
      _newValue?: null
    ): TypedEventFilter<
      [boolean, boolean],
      { _previousValue: boolean; _newValue: boolean }
    >;

    SetEditable(
      _previousValue?: null,
      _newValue?: null
    ): TypedEventFilter<
      [boolean, boolean],
      { _previousValue: boolean; _newValue: boolean }
    >;

    "SetGlobalManager(address,bool)"(
      _manager?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, boolean],
      { _manager: string; _value: boolean }
    >;

    SetGlobalManager(
      _manager?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, boolean],
      { _manager: string; _value: boolean }
    >;

    "SetGlobalMinter(address,bool)"(
      _minter?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, boolean],
      { _minter: string; _value: boolean }
    >;

    SetGlobalMinter(
      _minter?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, boolean],
      { _minter: string; _value: boolean }
    >;

    "SetItemManager(uint256,address,bool)"(
      _itemId?: BigNumberish | null,
      _manager?: string | null,
      _value?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { _itemId: BigNumber; _manager: string; _value: boolean }
    >;

    SetItemManager(
      _itemId?: BigNumberish | null,
      _manager?: string | null,
      _value?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { _itemId: BigNumber; _manager: string; _value: boolean }
    >;

    "SetItemMinter(uint256,address,uint256)"(
      _itemId?: BigNumberish | null,
      _minter?: string | null,
      _value?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _itemId: BigNumber; _minter: string; _value: BigNumber }
    >;

    SetItemMinter(
      _itemId?: BigNumberish | null,
      _minter?: string | null,
      _value?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _itemId: BigNumber; _minter: string; _value: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "UpdateItemData(uint256,uint256,address,string)"(
      _itemId?: BigNumberish | null,
      _price?: null,
      _beneficiary?: null,
      _metadata?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        _itemId: BigNumber;
        _price: BigNumber;
        _beneficiary: string;
        _metadata: string;
      }
    >;

    UpdateItemData(
      _itemId?: BigNumberish | null,
      _price?: null,
      _beneficiary?: null,
      _metadata?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        _itemId: BigNumber;
        _price: BigNumber;
        _beneficiary: string;
        _metadata: string;
      }
    >;
  };

  estimateGas: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<BigNumber>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addItems(
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    decodeTokenId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    editItemsData(
      _itemIds: BigNumberish[],
      _prices: BigNumberish[],
      _beneficiaries: string[],
      _metadatas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    encodeTokenId(
      _itemId: BigNumberish,
      _issuedId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    globalManagers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    globalMinters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initImplementation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      baseURI_: string,
      _creator: string,
      _shouldComplete: boolean,
      _isApproved: boolean,
      _rarities: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApproved(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    isEditable(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isMintingAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    issueTokens(
      _beneficiaries: string[],
      _itemIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    itemManagers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemMinters(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    itemsCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarities(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueItems(
      _itemIds: BigNumberish[],
      _contentHashes: string[],
      _metadatas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApproved(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEditable(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setItemsManagers(
      _itemIds: BigNumberish[],
      _managers: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setItemsMinters(
      _itemIds: BigNumberish[],
      _minters: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagers(
      _managers: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinters(
      _minters: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferCreatorship(
      _newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addItems(
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeTokenId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editItemsData(
      _itemIds: BigNumberish[],
      _prices: BigNumberish[],
      _beneficiaries: string[],
      _metadatas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    encodeTokenId(
      _itemId: BigNumberish,
      _issuedId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalManagers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalMinters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initImplementation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      baseURI_: string,
      _creator: string,
      _shouldComplete: boolean,
      _isApproved: boolean,
      _rarities: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEditable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMintingAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueTokens(
      _beneficiaries: string[],
      _itemIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    itemManagers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemMinters(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueItems(
      _itemIds: BigNumberish[],
      _contentHashes: string[],
      _metadatas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApproved(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEditable(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setItemsManagers(
      _itemIds: BigNumberish[],
      _managers: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setItemsMinters(
      _itemIds: BigNumberish[],
      _minters: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagers(
      _managers: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinters(
      _minters: string[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferCreatorship(
      _newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
