/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CollectionManagerInterface extends ethers.utils.Interface {
  functions: {
    "acceptedToken()": FunctionFragment;
    "allowedCommitteeMethods(bytes4)": FunctionFragment;
    "committee()": FunctionFragment;
    "createCollection(address,address,bytes32,string,string,string,address,tuple[])": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "manageCollection(address,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pricePerItem()": FunctionFragment;
    "rarities()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAcceptedToken(address)": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
    "setCommitteeMethods(bytes4[],bool[])": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setRarities(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedCommitteeMethods",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      string,
      string,
      BytesLike,
      string,
      string,
      string,
      string,
      {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "manageCollection",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerItem",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rarities", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommitteeMethods",
    values: [BytesLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRarities", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedCommitteeMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rarities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommitteeMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRarities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedTokenSet(address,address)": EventFragment;
    "CommitteeMethodSet(bytes4,bool)": EventFragment;
    "CommitteeSet(address,address)": EventFragment;
    "FeesCollectorSet(address,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RaritiesSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeMethodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaritiesSet"): EventFragment;
}

export type AcceptedTokenSetEvent = TypedEvent<
  [string, string] & { _oldAcceptedToken: string; _newAcceptedToken: string }
>;

export type CommitteeMethodSetEvent = TypedEvent<
  [string, boolean] & { _method: string; _isAllowed: boolean }
>;

export type CommitteeSetEvent = TypedEvent<
  [string, string] & { _oldCommittee: string; _newCommittee: string }
>;

export type FeesCollectorSetEvent = TypedEvent<
  [string, string] & { _oldFeesCollector: string; _newFeesCollector: string }
>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string] & {
    userAddress: string;
    relayerAddress: string;
    functionSignature: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RaritiesSetEvent = TypedEvent<
  [string, string] & { _oldRarities: string; _newRarities: string }
>;

export class CollectionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CollectionManagerInterface;

  functions: {
    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    allowedCommitteeMethods(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    committee(overrides?: CallOverrides): Promise<[string]>;

    createCollection(
      _forwarder: string,
      _factory: string,
      _salt: BytesLike,
      _name: string,
      _symbol: string,
      _baseURI: string,
      _creator: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    manageCollection(
      _forwarder: string,
      _collection: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pricePerItem(overrides?: CallOverrides): Promise<[BigNumber]>;

    rarities(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAcceptedToken(
      _newAcceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommittee(
      _newCommittee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommitteeMethods(
      _methods: BytesLike[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRarities(
      _newRarities: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  allowedCommitteeMethods(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  committee(overrides?: CallOverrides): Promise<string>;

  createCollection(
    _forwarder: string,
    _factory: string,
    _salt: BytesLike,
    _name: string,
    _symbol: string,
    _baseURI: string,
    _creator: string,
    _items: {
      rarity: string;
      price: BigNumberish;
      beneficiary: string;
      metadata: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  manageCollection(
    _forwarder: string,
    _collection: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pricePerItem(overrides?: CallOverrides): Promise<BigNumber>;

  rarities(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAcceptedToken(
    _newAcceptedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommittee(
    _newCommittee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommitteeMethods(
    _methods: BytesLike[],
    _values: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    _newFeesCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRarities(
    _newRarities: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptedToken(overrides?: CallOverrides): Promise<string>;

    allowedCommitteeMethods(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    committee(overrides?: CallOverrides): Promise<string>;

    createCollection(
      _forwarder: string,
      _factory: string,
      _salt: BytesLike,
      _name: string,
      _symbol: string,
      _baseURI: string,
      _creator: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    manageCollection(
      _forwarder: string,
      _collection: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pricePerItem(overrides?: CallOverrides): Promise<BigNumber>;

    rarities(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAcceptedToken(
      _newAcceptedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommittee(
      _newCommittee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommitteeMethods(
      _methods: BytesLike[],
      _values: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRarities(_newRarities: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedTokenSet(address,address)"(
      _oldAcceptedToken?: string | null,
      _newAcceptedToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAcceptedToken: string; _newAcceptedToken: string }
    >;

    AcceptedTokenSet(
      _oldAcceptedToken?: string | null,
      _newAcceptedToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAcceptedToken: string; _newAcceptedToken: string }
    >;

    "CommitteeMethodSet(bytes4,bool)"(
      _method?: BytesLike | null,
      _isAllowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { _method: string; _isAllowed: boolean }
    >;

    CommitteeMethodSet(
      _method?: BytesLike | null,
      _isAllowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { _method: string; _isAllowed: boolean }
    >;

    "CommitteeSet(address,address)"(
      _oldCommittee?: string | null,
      _newCommittee?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldCommittee: string; _newCommittee: string }
    >;

    CommitteeSet(
      _oldCommittee?: string | null,
      _newCommittee?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldCommittee: string; _newCommittee: string }
    >;

    "FeesCollectorSet(address,address)"(
      _oldFeesCollector?: string | null,
      _newFeesCollector?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldFeesCollector: string; _newFeesCollector: string }
    >;

    FeesCollectorSet(
      _oldFeesCollector?: string | null,
      _newFeesCollector?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldFeesCollector: string; _newFeesCollector: string }
    >;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >;

    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RaritiesSet(address,address)"(
      _oldRarities?: string | null,
      _newRarities?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldRarities: string; _newRarities: string }
    >;

    RaritiesSet(
      _oldRarities?: string | null,
      _newRarities?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldRarities: string; _newRarities: string }
    >;
  };

  estimateGas: {
    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    allowedCommitteeMethods(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<BigNumber>;

    createCollection(
      _forwarder: string,
      _factory: string,
      _salt: BytesLike,
      _name: string,
      _symbol: string,
      _baseURI: string,
      _creator: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    manageCollection(
      _forwarder: string,
      _collection: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerItem(overrides?: CallOverrides): Promise<BigNumber>;

    rarities(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAcceptedToken(
      _newAcceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommittee(
      _newCommittee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommitteeMethods(
      _methods: BytesLike[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRarities(
      _newRarities: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedCommitteeMethods(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCollection(
      _forwarder: string,
      _factory: string,
      _salt: BytesLike,
      _name: string,
      _symbol: string,
      _baseURI: string,
      _creator: string,
      _items: {
        rarity: string;
        price: BigNumberish;
        beneficiary: string;
        metadata: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manageCollection(
      _forwarder: string,
      _collection: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerItem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rarities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAcceptedToken(
      _newAcceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommittee(
      _newCommittee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommitteeMethods(
      _methods: BytesLike[],
      _values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRarities(
      _newRarities: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
