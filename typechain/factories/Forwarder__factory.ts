/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Forwarder, ForwarderInterface } from "../Forwarder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_oldCaller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_newCaller",
        type: "address",
      },
    ],
    name: "CallerSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "caller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "forwardCall",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newCaller",
        type: "address",
      },
    ],
    name: "setCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107f63803806107f683398101604081905261002f91610200565b61003833610051565b610041816100a1565b61004a82610135565b5050610267565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336100aa6101d5565b6001600160a01b0316146100d95760405162461bcd60e51b81526004016100d090610232565b60405180910390fd5b6001546040516001600160a01b038084169216907fbd18172dc2a1c4d328954b062b299862c7c0fffd4298c0961dc08f979a764a9a90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b3361013e6101d5565b6001600160a01b0316146101645760405162461bcd60e51b81526004016100d090610232565b6001600160a01b0381166101c95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d0565b6101d281610051565b50565b6000546001600160a01b031690565b80516001600160a01b03811681146101fb57600080fd5b919050565b60008060408385031215610212578182fd5b61021b836101e4565b9150610229602084016101e4565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b610580806102766000396000f3fe6080604052600436106100555760003560e01c806322bee4941461005a578063715018a6146100845780638da5cb5b1461009b578063beb92f55146100c8578063f2fde38b146100e8578063fc9c8d3914610108575b600080fd5b61006d61006836600461042b565b610128565b60405161007b9291906104b8565b60405180910390f35b34801561009057600080fd5b50610099610229565b005b3480156100a757600080fd5b506100b0610264565b6040516001600160a01b03909116815260200161007b565b3480156100d457600080fd5b506100996100e336600461040a565b610273565b3480156100f457600080fd5b5061009961010336600461040a565b6102fe565b34801561011457600080fd5b506001546100b0906001600160a01b031681565b6001546000906060906001600160a01b031633148061015f575061014a610264565b6001600160a01b0316336001600160a01b0316145b6101bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e657223666f727761726443616c6c3a20554e415554484f52495a45445f60448201526529a2a72222a960d11b60648201526084015b60405180910390fd5b846001600160a01b03163485856040516101da9291906104a8565b60006040518083038185875af1925050503d8060008114610217576040519150601f19603f3d011682016040523d82523d6000602084013e61021c565b606091505b5091509150935093915050565b33610232610264565b6001600160a01b0316146102585760405162461bcd60e51b81526004016101b690610515565b610262600061039e565b565b6000546001600160a01b031690565b3361027c610264565b6001600160a01b0316146102a25760405162461bcd60e51b81526004016101b690610515565b6001546040516001600160a01b038084169216907fbd18172dc2a1c4d328954b062b299862c7c0fffd4298c0961dc08f979a764a9a90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b33610307610264565b6001600160a01b03161461032d5760405162461bcd60e51b81526004016101b690610515565b6001600160a01b0381166103925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101b6565b61039b8161039e565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461040557600080fd5b919050565b60006020828403121561041b578081fd5b610424826103ee565b9392505050565b60008060006040848603121561043f578182fd5b610448846103ee565b925060208401356001600160401b0380821115610463578384fd5b818601915086601f830112610476578384fd5b813581811115610484578485fd5b876020828501011115610495578485fd5b6020830194508093505050509250925092565b8183823760009101908152919050565b8215158152600060206040818401528351806040850152825b818110156104ed578581018301518582016060015282016104d1565b818111156104fe5783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212202a6556aa26e1c503a6e7a906b022cb4060c565cde0b7b2fd089db2d3b2e3911264736f6c63430008040033";

export class Forwarder__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _owner: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Forwarder> {
    return super.deploy(_owner, _caller, overrides || {}) as Promise<Forwarder>;
  }
  getDeployTransaction(
    _owner: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, _caller, overrides || {});
  }
  attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
